return(c(mean=av, SD=sdev))
}
runif(10,0,1)>99/100
runif(10,0,1)>99/100
runif(10,0,1)>99/100
runif(10,0,1)>99/100
runif(10,0,1)>99/100
runif(10,0,1)>99/100
1*runif(10,0,1)>99/100
0+runif(10,0,1)>99/100
0+runif(10,0,1)>99/100
p=runif(10,0,1)>99/100;
5*p
simData=rnorm(1000,1+(10-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
p=runif(1000,0,1)>99/100;
simData=rnorm(1000,1+(10-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
any(abs((simData-mean(simData)))>3*sd(simData))
which(abs((simData-mean(simData)))>3*sd(simData))
p=runif(1000,0,1)>99/100;
simData=rnorm(1000,1+(100-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
any(abs((simData-median(simData)))>3*mad(simData))
which(abs((simData-median(simData)))>3*mad(simData))
mad(simData)
median(simData)
simData[which(abs((simData-median(simData)))>3*mad(simData))]
p=runif(1000,0,1)>99/100;
simData=rnorm(1000,1+(100-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
any(abs((simData-median(simData)))>3*mad(simData))
simData[which(abs((simData-median(simData)))>3*mad(simData))]
simData[which(abs((simData-median(simData)))>3*mad(simData))]
p=runif(1000,0,1)>99/100;
simData=rnorm(1000,1+(10-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
any(abs((simData-median(simData)))>3*mad(simData))
simData[which(abs((simData-median(simData)))>3*mad(simData))]
p=runif(1000,0,1)>99/100;
simData=rnorm(1000,1+(10-1)*p,sqrt(4)+(sqrt(9)-sqrt(4))*p)
any(abs((simData-median(simData)))>3*mad(simData))
simData[which(abs((simData-median(simData)))>3*mad(simData))]
rand.Circle <- function(n,x_0,y_0,R){
theta = 2*pi*runif(n,0,1);
r = R*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
}
rand.Circle(10,0,0,1)
rand.Circle <- function(n,x_0,y_0,R){
theta = 2*pi*runif(n,0,1);
r = R*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(cbind(x,y))
}
rand.Circle(10,0,0,1)
rand.Circle <- function(n,x_0,y_0,R){
theta = 2*pi*runif(n,0,1);
r = R*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(c(x,y))
}
rand.Circle(10,0,0,1)
rand.Circle <- function(n,x_0,y_0,R){
theta = 2*pi*runif(n,0,1);
r = R*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(cbind(x,y))
}
rand.Circle(10,0,0,1)
plot(rand.Circle(10,0,0,1))
plot(rand.Circle(1000,0,0,1))
plot(rand.Circle(1000,0,0,1))
rand.Circle <- function(n,x_0,y_0,r){
theta = 2*pi*runif(n,0,1);
R = r*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(cbind(x,y))
}
plot(rand.Circle(1000,0,0,1))
plot(rand.Circle(1000,0,0,4))
plot(rand.Circle(10000,0,0,4))
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
n=10000
trials=100
squareEst=numeric(n)
square.approx.Pi<- function(trials){
x=runif(trials,min = -1,max = 1);
y=runif(trials,min = -1,max = 1);
return(4*sum(sqrt(x^2+y^2)<=1)/trials);
}
n=10000
trials=100
approx.Pi=numeric(n)
square.approx.Pi(1000)
square.approx.Pi(10000)
for(i in 1:n){
approx.Pi[i]=square.approx.Pi(trials);
}
min(approx.Pi)
max(approx.Pi)
mean(approx.Pi)
pi # Theoretical mean
median(approx.Pi)
sd(approx.Pi)
sqrt(pi*(4-pi)/trials) # Theoretical standard deviation
summary(approx.Pi)
boxplot(approx.Pi)
hist(approx.Pi,probability = TRUE)
alpha=0.05
th.limits=c(lower.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = FALSE))
emp.limits=c(lower.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = FALSE))
th.limits
emp.limits
th.limits
emp.limits
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
mean.and.sd <- function(x){
av <- mean(x)
sdev <- sd(x)
return(c(mean=av, SD=sdev))
}
uniData<-runif(1000,min = 0,max = 1)  # runif - генерира равномерно разпределени сл.в.
1/2; sqrt(1/12)
mean.and.sd(uniData)
rand.Circle <- function(n,x_0,y_0,r){
theta = 2*pi*runif(n,0,1);
R = r*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(cbind(x,y))
}
plot(rand.Circle(10000,0,0,4))
plot(rand.Circle(10000,0,0,4),xlim=c(-4,4), ylim=c(-4,4))
plot(rand.Circle(10000,0,0,4),xlim=c(-4,4), ylim=c(-4,4),asp=1)
plot(rand.Circle(10000,0,0,4),asp=1)
plot(rand.Circle(1000,0,0,4),asp=1)
plot(rand.Circle(10000,0,0,4),asp=1)
a<-sample(100:1000,1)
a
i=1:23
i
p.comp=(366-indexVector)/365
indexVector=1:23;
p.comp=(366-indexVector)/365
p.comp
prod(p.comp)
p.comp=(366-1:23)/365;
(p=1-prod(p.comp))
p.comp=1;
for (i in 1:23){
p.comp=p.comp*(366-i)/365;
}
(p=1-p.comp)
{p.comp=1;
for (i in 1:23){
p.comp=p.comp*(366-i)/365;
}
(p=1-p.comp)}
boxplot(approx.Pi)
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
mean.and.sd <- function(x){
av <- mean(x)
sdev <- sd(x)
return(c(mean=av, SD=sdev))
}
uniData<-runif(1000,min = 0,max = 1)  # runif - генерира равномерно разпределени сл.в.
1/2; sqrt(1/12)
mean.and.sd(uniData)
rand.Circle <- function(n,x_0,y_0,r){
theta = 2*pi*runif(n,0,1);
R = r*sqrt(runif(n,0,1));
x = x_0 + R*cos(theta);
y = y_0 + R*sin(theta);
return(cbind(x,y))
}
plot(rand.Circle(10000,0,0,4),asp=1)
a<-sample((-100):100,1)
if (a>0) print(paste("Числото",a,"е положително!",sep = " "))
a<-sample(100:1000,1)
b=2
deliSe=paste("Числото",a,"се дели на",b,"!",sep = " ")
neSeDeli=paste("Числото",a,"не се дели на",b,"!",sep = " ")
if (a%%b==0) { print(deliSe)
} else {print(neSeDeli)}
ifelse(a%%b, neSeDeli, deliSe)
n=30
for (i in 1:n){
a<-sample(100:1000,1)
if (a%%2==0 & a%%3==0) print(paste("Числото",a,"се дели на 6!",sep = " "))
}
a=1
repeat {
print(a)
a=a+1
if (a==10){
break
}
}
a=1
while (a<10){
print(a)
a=a+1
}
for(i in 1:10){
if(i%%2==0) { print(i)
} else next
}
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
square.approx.Pi<- function(trials){
x=runif(trials,min = -1,max = 1);
y=runif(trials,min = -1,max = 1);
return(4*sum(sqrt(x^2+y^2)<=1)/trials);
}
square.approx.Pi(10000)
n=10000
trials=100
approx.Pi=numeric(n);
approx.Pi=numeric(n);
for(i in 1:n){
approx.Pi[i]=square.approx.Pi(trials);
}
min(approx.Pi)
max(approx.Pi)
mean(approx.Pi)
pi # Theoretical mean
median(approx.Pi)
sd(approx.Pi)
sqrt(pi*(4-pi)/trials) # Theoretical standard deviation
summary(approx.Pi)
alpha=0.05
th.limits=c(lower.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = FALSE))
th.limits
emp.limits=c(lower.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = FALSE))
th.limits=c(lower.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=pi,sd=sqrt(pi*(4-pi)/trials),lower.tail = FALSE))
th.limits
emp.limits=c(lower.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = TRUE),
upper.bound=qnorm(alpha/2,mean=mean(approx.Pi),sd=sd(approx.Pi),lower.tail = FALSE))
emp.limits
boxplot(approx.Pi)
hist(approx.Pi,probability = TRUE)
th.limits
abline(emp.limits,col=2)
abline(emp.limits,col=2)
abline(emp.limits,v=TRUE,col=2)
abline(3,v=TRUE,col=2)
abline(v=p.limits,col=2)
abline(v=emp.limits,col=2)
?par
?points
plot(1:25,pch=1:25,cex=1.5)
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=3)
?seq
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,5,by=0.5))
?seq
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,2.5,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,3,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,5,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=1:10)
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=1.5)
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=seq(1,5,length.out = 10))
plot(1:25,pch=1:25,cex=seq(1,3,length.out = 10))
seq(1,3,length.out = 10)
plot(1:25,pch=1:25,cex=seq(1,3,length.out = 25))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=seq(3,1,length.out = 25))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
boxplot(approx.Pi)
hist(approx.Pi,probability = TRUE)
abline(v=emp.limits,col=2,lty=2)
abline(v=emp.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
abline(v=th.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
hist(approx.Pi,probability = TRUE)
abline(v=th.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
boxplot(approx.Pi)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
а=norm.contaminated.sample(100,1,2,1,proportion=1/5,size=10000)
p=runif(size,0,1)>proportion;
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
а=norm.contaminated.sample(100,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
boxplot(data)
data=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
boxplot(data)
hist(data)
data=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
a=density(w,bw="SJ")
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(w), sd=sd(w)), add=TRUE, col=2,lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
mean(data)
8/5
data=norm.contaminated.sample(0,1,2,1,proportion=4/5,size=10000)
mean(data)
2/5;mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=9/10,size=10000)
2/5; mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=4/5,size=10000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=10000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
t_stat=(mean(data)-1)/sd(data)
t_stat
mean(data)
sd(data)
t.test(data, mu=1)
shapiro.test(data)
data
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=1000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
mu=mean(data);
sd=sd(data);
tStat=(mu-1)/sd(data)
(mu=mean(data))
(sd=sd(data))
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd(data))
shapiro.test(data)
t.test(data, mu=1)
shapiro.test(data)
(tStat=(mu-1)/sd(data))
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd(data))
(tStat=(mu-1)/sd)
t.test(data, mu=1)
t.test(data, mu=1)
shapiro.test(data)
(tStat=1000*(mu-1)/sd)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=1000)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd)
t.test(data, mu=1)
(tStat=sqrt(1000)*(mu-1)/sd)
t.test(data, mu=1)
dt(tStat,1000-1)
t.test(data, mu=1)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
dt(tStat,100-1)
t.test(data, mu=1)
qt(0.05,100-1)
dt(tStat,100-1)
dt(-1.66,100-1)
qt(0.05,100-1)
qt(0.04,100-1)
qt(0.02,10000-1)
alpha=0.05;
qt(alpha/2,100-1)
tStat
dt(tStat,100-1)
t.test(data, mu=1)
1-dt(tStat,100-1)
dt(1.66,100-1)
dt(100,100-1)
dt(2,100-1)
dt(2.05,100-1)
criticalValue=qt(alpha/2,100-1)
criticalValue
criticalValue=qt(1-alpha/2,100-1)
criticalValue
(p-value=2*dt(tStat,100-1))
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
(p-value=2*dt(tStat,100-1))
(pValue=2*dt(tStat,100-1))
t.test(data, mu=1)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
tStat
dt(tStat,100-1)
(pValue=dt(tStat,100-1)/2)
t.test(data, mu=1)
t.test(data, mu=1)
criticalValue
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
choose(10000,655)
choose(1000,655)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
norm.contaminated.sample(100,1,proportion=1/5,size=20)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
t.test(data, mu=1)
?dt
tStat
dt(tStat)
dt(tStat,df=99)
dt(tStat,df=99,lower.tail=TRUE)
qt(tStat,df=99,lower.tail=TRUE)
pt(tStat,df=99,lower.tail=TRUE)
pt(tStat,df=99,lower.tail=FALSE)
2*pt(abs(tStat),df=99,lower.tail=FALSE)
(p_value=2*pt(abs(tStat),df=99,lower.tail=FALSE))
t.test(data, mu=1)
shapiro.test(data)
shapiro.test(rnorm(100))
(mu=mean(data))
(sd=sd(data))
mean.and.sd(data)
mean.and.sd <- function(x){
av <- mean(x)
sdev <- sd(x)
return(c(mean=av, SD=sdev))
}
mean.and.sd(data)
ks.test(data,"normal")
ks.test(data,"pnorm")
qqplot(data)
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
