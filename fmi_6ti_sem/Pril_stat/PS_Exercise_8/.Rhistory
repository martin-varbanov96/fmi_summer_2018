colnames(corVector)=mapply(paste,"X",ind-1,sep="")
corVector[,order(corVector[2,])]
dataM[,length(dataM)+1]=dataM[,3]
names(dataM)[length(dataM)]=paste("X")
str(dataM)
corVector
corVector[,order(corVector[2,])]
order(corVector[2,])
ord_index=order(corVector[2,])
corVector[,ord_index]
ord_index[1]
dataM[,length(dataM)+1]=dataM[,ord_index[1]+1]
names(dataM)[length(dataM)]=paste("X")
str(dataM)
rm(list=ls())
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
corTable=cor(dataM)
getCor <- function(x){
a=cor.test(dataM[,1],dataM[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=2:length(dataM)
corVector=sapply(ind,getCor)
corVector
colnames(corVector)=mapply(paste,"X",ind-1,sep="")
ord_index=order(corVector[2,])
corVector[,ord_index]
dataM[,length(dataM)+1]=dataM[,ord_index[1]+1]
names(dataM)[length(dataM)]=paste("X")
str(dataM)
model1=lm(Y ~ X,data = dataM)
summary(model1)
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
library(MASS)
rm(list=ls())
str(Boston)
??Boston
model1=lm(Y ~ X,data = dataM)
summary(model1)
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
corTable=cor(dataM)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
corTable=cor(dataM)
corTable
summary(model1)
model1=lm(Y ~ X,data = dataM)
rm(list=ls())
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
corTable=cor(dataM)
getCor <- function(x){
a=cor.test(dataM[,1],dataM[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=2:length(dataM)
corVector=sapply(ind,getCor)
corVector
colnames(corVector)=mapply(paste,"X",ind-1,sep="")
ord_index=order(corVector[2,])
corVector[,ord_index]
dataM[,length(dataM)+1]=dataM[,ord_index[1]+1]
names(dataM)[length(dataM)]=paste("X")
str(dataM)
model1=lm(Y ~ X,data = dataM)
minX=floor(min(dataM$X))
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
maxX=floor(max(dataM$X))+1
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
summary(model1)
library(MASS)
summary(model1)
summary(model1)
deviance(model1)
sqrt(deviance(model1))
str(model1)
df.residual(model1)
summary(model1)
(se=sqrt(deviance(model1)/df.residual(model1)))
rse=se/mean(dataM$Y)
rse
residuals(model1)
shapiro.test(residuals(model1))
ks.test(residuals(model1),"pnorm")
ks.test(residuals(model1),"pnorm",0,se)
plot(model1)
fitted.values(model1)
hatvalues(model1)
ks.test(residuals(model1),"pnorm",0,se)
ks.test(residuals(model1),"pnorm",mean=0,sd=se)
shapiro.test(residuals(model1))
ks.test(residuals(model1),"pnorm",mean=0,sd=se)
fitted.values(model1)
residuals(model1)
dataM$X
dataM$X-mean(dataM$X)
(dataM$X-mean(dataM$X))^2
(dataM$X-mean(dataM$X))^2/sum((dataM$X-mean(dataM$X))^2)
1/157+(dataM$X-mean(dataM$X))^2/sum((dataM$X-mean(dataM$X))^2)
plot(model1)
library(MASS)
rm(list=ls())
str(Boston)
??Boston
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
plot(lstat,medv)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
par(mfrow=c(1,1))
which.max(hatvalues(lm.fit))
# Non-linear transform
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(1,1))
plot(lm.fit2)
rm(list=ls())
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
corTable=cor(dataM)
getCor <- function(x){
a=cor.test(dataM[,1],dataM[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=2:length(dataM)
corVector=sapply(ind,getCor)
corVector
colnames(corVector)=mapply(paste,"X",ind-1,sep="")
ord_index=order(corVector[2,])
corVector[,ord_index]
dataM[,length(dataM)+1]=dataM[,ord_index[1]+1]
names(dataM)[length(dataM)]=paste("X")
str(dataM)
model1=lm(Y ~ X,data = dataM)
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
summary(model1)
se=sqrt(deviance(model1)/df.residual(model1))
se                  # standard error
rse=se/mean(dataM$Y)
rse                 # realtive standard error
plot(model1)
plot(model1)
shapiro.test(residuals(model1))
ks.test(residuals(model1),"pnorm",mean=0,sd=se)
bartlett.test(Y~X,data=dataM)
as.factor(dataM$X>median(data$M))
dataM$X
dataM$X>median(data$M)
as.factor(dataM$X>median(dataM$X))
as.factor(Group=dataM$X>median(dataM$X))
dataM[,length(dataM)+1]=as.factor(dataM$X>median(dataM$X))
names(dataM)[length(dataM)]=paste("Group")
str(dataM)
levels(dataM[,length(dataM)])
levels(dataM[,length(dataM)])=c("Group 1","Group 2")
str(dataM)
names(dataM)[length(dataM)]=paste("X_Groups")
levels(dataM[,length(dataM)])=c("Group 1","Group 2")
str(dataM)
bartlett.test(X_Groups~X,data = dataM)
bartlett.test(X~X_Groups,data = dataM)
which(dataM$X_Groups=="Group 1")
lm(Y~X,data = dataM, subset = which(dataM$X_Groups=="Group 1"))
lmg1=lm(Y~X,data = dataM, subset = which(dataM$X_Groups=="Group 1"))
lmg2=lm(Y~X,data = dataM, subset = which(dataM$X_Groups=="Group 2"))
bartlett_stat=deviance(lmg1)/deviance(lmg2)
bartlett_stat
bartlett_stat=deviance(lmg1)/deviance(lmg2)
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)
bartlett_p.value
bartlett_stat
df.residual(lmg1)
df.residual(lmg2)
median(dataM$X)
if(bartlett_stat>1){
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)}
else{bartlett_p.value=pf(1/bartlett_stat, df.residual(lmg2), df.residual(lmg1), lower.tail = FALSE)}
if(bartlett_stat>1){
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)
}else{bartlett_p.value=pf(1/bartlett_stat, df.residual(lmg2), df.residual(lmg1), lower.tail = FALSE)}
if(bartlett_stat>1){
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)
}
bartlett_p.value
if(bartlett_stat>1){
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)
}
if(bartlett_stat>1){
bartlett_p.value=pf(bartlett_stat, df.residual(lmg1), df.residual(lmg2), lower.tail = FALSE)
} else{
bartlett_p.value=pf(1/bartlett_stat, df.residual(lmg2), df.residual(lmg1), lower.tail = FALSE)}
c("Stat"=bartlett_stat,"p.value"=bartlett_p.value)
set.seed (1)
x1=runif (100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1 +0.3*x2+rnorm(100)
y
lm(y~x1+x2)
summary(lm(y~x1+x2))
plot(x1,x2)
summary(lm(y~x1+x2))
cor.test(x1,x2)
summary(lm(y~x1))
summary(lm(y~x2))
summary(lm(y~x1+x2))
rm(list=ls())
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
corTable=cor(dataM)
corTable
model2=lm(Y~X2+X4,data = dataM)
summary(model2)
corTable
QMC_X10=lm(X10~X2+X4,data = dataM)
summary(QMC_X10)
model3=lm(Y~X2+X4+X10,data = dataM)
summary(model3)
corTable
QMC_X1=lm(X1~X2+X4+X10,data = dataM)
summary(QMC_X1)
model4=lm(Y~X2+X4+X10+X1,data = dataM)
summary(model4)
corTable
QMC_X3=lm(X3~X2+X4+X10,data = dataM)
summary(QMC_X3)
model5=lm(Y~X2+X4+X10+X3,data = dataM)
summary(model5)
corTable
QMC_X5=lm(X5~X2+X4+X10+X3,data = dataM)
summary(QMC_X5)
model6=lm(Y~X2+X4+X10+X3+X5,data = dataM)
summary(model6)
corTable
QMC_X8=lm(X8~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X8)
QMC_X8=lm(X8~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X8)
model7=lm(Y~X2+X4+X10+X3+X5+X8,data = dataM)
summary(model7)
corTable
summary(QMC_X1)
summary(model4)
corTable
QMC_X7=lm(X7~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X7)
corTable
QMC_X9=lm(X9~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X9)
model8=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model8)
QMC_X6=lm(X6~X2+X4+X10+X3+X5+X9,data = dataM)
summary(QMC_X6)
model9=lm(Y~X2+X4+X10+X3+X5+X9+X6,data = dataM)
summary(model9)
model=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model)
rm(list=ls())
dataM=read.csv("Data\\Cars_raw_M.csv",sep = ";")
dataM
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
model2=lm(Y~X2+X4,data = dataM)
summary(model2)
QMC_X10=lm(X10~X2+X4,data = dataM)
summary(QMC_X10)
model3=lm(Y~X2+X4+X10,data = dataM)
summary(model3)
QMC_X1=lm(X1~X2+X4+X10,data = dataM)
summary(QMC_X1)
model4=lm(Y~X2+X4+X10+X1,data = dataM)
summary(model4)
QMC_X3=lm(X3~X2+X4+X10,data = dataM)
summary(QMC_X3)
model5=lm(Y~X2+X4+X10+X3,data = dataM)
summary(model5)
QMC_X5=lm(X5~X2+X4+X10+X3,data = dataM)
summary(QMC_X5)
model6=lm(Y~X2+X4+X10+X3+X5,data = dataM)
summary(model6)
QMC_X8=lm(X8~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X8)
model7=lm(Y~X2+X4+X10+X3+X5+X8,data = dataM)
summary(model7)
QMC_X7=lm(X7~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X7)
QMC_X9=lm(X9~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X9)
model8=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model8)
QMC_X6=lm(X6~X2+X4+X10+X3+X5+X9,data = dataM)
summary(QMC_X6)
model9=lm(Y~X2+X4+X10+X3+X5+X9+X6,data = dataM)
summary(model9)
model=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model)
plot(model)
dataP=read.csv("Data\\Cars_raw_P.csv",sep = ";")
dataP
rm(list=ls())                    ### Quasi-multicollinearity ###
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
corTable=cor(dataM)
model2=lm(Y~X2+X4,data = dataM)
summary(model2)
QMC_X10=lm(X10~X2+X4,data = dataM)
summary(QMC_X10)
model3=lm(Y~X2+X4+X10,data = dataM)
summary(model3)
QMC_X1=lm(X1~X2+X4+X10,data = dataM)
summary(QMC_X1)
model4=lm(Y~X2+X4+X10+X1,data = dataM)
summary(model4)
QMC_X3=lm(X3~X2+X4+X10,data = dataM)
summary(QMC_X3)
model5=lm(Y~X2+X4+X10+X3,data = dataM)
summary(model5)
QMC_X5=lm(X5~X2+X4+X10+X3,data = dataM)
summary(QMC_X5)
model6=lm(Y~X2+X4+X10+X3+X5,data = dataM)
summary(model6)
QMC_X8=lm(X8~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X8)
model7=lm(Y~X2+X4+X10+X3+X5+X8,data = dataM)
summary(model7)
QMC_X7=lm(X7~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X7)
QMC_X9=lm(X9~X2+X4+X10+X3+X5,data = dataM)
summary(QMC_X9)
model8=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model8)
QMC_X6=lm(X6~X2+X4+X10+X3+X5+X9,data = dataM)
summary(QMC_X6)
model9=lm(Y~X2+X4+X10+X3+X5+X9+X6,data = dataM)
summary(model9)
model=lm(Y~X2+X4+X10+X3+X5+X9,data = dataM)
summary(model)
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for modelling
dataP
predict(model, newdata=dataP)
predict(model, int="p", newdata=dataP)
predict(model, int="p", newdata=dataP)
Y_predicted=predict(model, newdata=dataP)
Y_predicted
MAE=mean(abs(dataM$Y-Y_predicted))
MAE=mean(abs(dataP$Y-Y_predicted))
MAE
MSE=mean((dataP$Y-Y_predicted)^2)
MSE
MAE=mean(abs(dataP$Y-Y_predicted))  # Mean Absolute Error
MSE=mean((dataP$Y-Y_predicted)^2)   # Mean Squared Error
RMSE=sqrt(MSE)                      # Root Mean Squared Error
MSE
RMSE
MAE
MARE=mean(abs((dataP$Y-Y_predicted)/dataP$Y))  # Mean Absolute Relative Error
MARE
MSRE=mean(((dataP$Y-Y_predicted)/dataP$Y)^2)  # Mean Squared Relative Error
MSRE
MAE RMSE
MAE; RMSE
c=("MAE"=MAE,"RMSE"=RMSE)
c=("MAE"=MAE;"RMSE"=RMSE)
c=(MAE=MAE,RMSE=RMSE)
c=(MAE=MAE,RMSE=RMSE)
MAE;RMSE
MARE=mean(abs((dataP$Y-Y_predicted)/dataP$Y))  # Mean Absolute Relative Error
MSRE=mean(((dataP$Y-Y_predicted)/dataP$Y)^2)  # Mean Squared Relative Error
RMSRE=sqrt(MSRE)                              # Root Mean Squared Relative Error
MARE; RMSRE
PMAE=MAE/mean(dataP$Y)  # Percentage Mean Absolute Error
PMAE
PMAE; PRMSE
PRMSE=RMSE/mean(dataP$Y)    # Percentage Root Mean Squared Error
PMAE; PRMSE
MARE; RMSRE
cor.test(Y_predicted,dataP$Y)
plot(dataP$Y, Y_predicted, pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
plot(Y_predicted, dataP$Y, pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(lm(Y_predicted~dataP$Y), col=rgb(220/255,0,0), lwd=3)
plot(dataP$Y, Y_predicted, pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(lm(dataP$Y~Y_predicted), col=rgb(220/255,0,0), lwd=3)
summary(lm(dataP$Y~Y_predicted))
plot(dataP$Y, Y_predicted, pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(lm(dataP$Y~Y_predicted-1), col=rgb(220/255,0,0), lwd=3)
summary(lm(dataP$Y~Y_predicted-1))
summary(lm(dataP$Y~Y_predicted))
Theil_coeff=sqrt(mean((dataP$Y)^2)+mean((Y_predicted)^2))/sqrt(mean((dataP$Y-Y_predicted)^2))
Theil_coeff
Theil_coeff=sqrt(mean((dataP$Y-Y_predicted)^2))/sqrt(mean((dataP$Y)^2)+mean((Y_predicted)^2))
Theil_coeff
se=sqrt(deviance(model)/df.residual(model))
se                  # standard error
rse=se/mean(dataM$Y)
rse                 # realtive standard error
Advertising=read.csv("Data\\Advertising.csv",sep = ";")
rm(list=ls())
Advertising=read.csv("Data\\Advertising.csv",sep = ";")
Advertising
Advertising=read.csv("Data\\Advertising.csv",sep = ",")
Advertising
Advertising=read.csv("Data\\Advertising.csv",sep = ",",colClasses=c("NULL",NA,NA,NA,NA))
Advertising
str(Advertising)
rm(list=ls())                    ### Quasi-multicollinearity ###
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
model2=lm(Y~X2+X4,data = dataM)
summary(model2)
model2=lm(Y~X2:X4,data = dataM)
summary(model2)
model2=lm(Y~X2*X4,data = dataM)
summary(model2)
model2=lm(Y~X2*X4+X2*X10,data = dataM)
summary(model2)
rm(list=ls())
Advertising=read.csv("Data/Advertising.csv",sep = ",",colClasses=c("NULL",NA,NA,NA,NA))
str(Advertising)
cor(Advertising)
lm(sales~TV, data=Advertising)
lm(sales~TV, data=Advertising)
lm(sales~TV+radio+newspaper, data=Advertising)
model = lm(sales~TV+radio+newspaper, data=Advertising)
summary(model)
sqrt(0.89)
model = lm(sales~TV+radio, data=Advertising)
summary(model)
model = lm(sales~TV, data=Advertising)
summary(model)
cor(Advertising)
model = lm(sales~TV+newspaper, data=Advertising)
summary(model)
deviation(model)
deviance(model)
SSE = deviance(model)
SE = sqrt(SSE/(n-2))
SSE = deviance(model)
n = 200
SE = sqrt(SSE/(n-2))
RSE = SE/mean(Advertising$sales)
