legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
})
model1
read_excel("Data\\Cars_raw.xls",sheet=1)
rm(list=ls())                             ###### Exercise 6 ######
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
corTable=cor(dataM)
test=cor.test(dataM[,1],dataM[,2])
str(test)
getCor <- function(x){
a=cor.test(dataM[,1],dataM[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataM)-1)
corVector=sapply(ind+1,getCor)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
dataM[,12]=dataM[,5]
dataM[,12]=dataM[,3]
names(dataM)[12]=paste("X")
str(dataM)
model1=lm(Y ~ X,data = dataM)
summary(model1)
minX=floor(min(X))
maxX=floor(max(X))+1
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
pp
dataM$X>=pp[,3]
pp[,3]
pp
predData
dataM$X
minX
maxX
predict(model1, int="p", newdata=dataM$X,level=0.95)
predict(model1, int="p", newdata=data.frame(X=dataM$X),level=0.95)
ppInt=predict(model1, int="p", newdata=data.frame(X=dataM$X),level=0.95)
dataM$X>=ppInt[,3]
dataM$Y>=ppInt[,3]
sum(dataM$Y>=ppInt[,3])
which(dataM$Y>=ppInt[,3])
which(dataM$Y>=ppInt[,3] || dataM$Y<=ppInt[,2])
which(dataM$Y>=ppInt[,3] or dataM$Y<=ppInt[,2])
which(dataM$Y>=ppInt[,3] + dataM$Y<=ppInt[,2])
which((dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2])
which((dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2])
)
which((dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2]))
(dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2])
model1=lm(Y ~ X,data = dataM)
summary(model1)
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
ppInt=predict(model1, int="p", newdata=data.frame(X=dataM$X),level=0.95)
(dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2])
a=(dataM$Y>=ppInt[,3])+(dataM$Y<=ppInt[,2])
sum(a)
(dataM$Y<ppInt[,3])*(dataM$Y>ppInt[,2])
sum((dataM$Y<ppInt[,3])*(dataM$Y>ppInt[,2]))
dataClean=dataM[(dataM$Y<ppInt[,3])*(dataM$Y>ppInt[,2]),]
dataClean
(dataM$Y<ppInt[,3])*(dataM$Y>ppInt[,2])
which((dataM$Y<ppInt[,3])*(dataM$Y>ppInt[,2]))
which((dataM$Y<ppInt[,3]) && (dataM$Y>ppInt[,2]))
(dataM$Y<ppInt[,3])
(dataM$Y>ppInt[,2])
which((dataM$Y<ppInt[,3]) && (dataM$Y>ppInt[,2]))
(dataM$Y<ppInt[,3]) && (dataM$Y>ppInt[,2])
which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2]))
(dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])
which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2]))
(dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2])
sum((dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2]))
dataClean=dataM[which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])),]
dataClean
dataClean=dataM[which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])),]
str(dataClean)
getCor2 <- function(x){
a=cor.test(dataClean[,1],dataClean[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataClean)-1)
corVector=sapply(ind+1,getCor2)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
dataM[,12]=dataM[,5]
dataClean[,12]=dataClean[,5]
names(dataClean)[12]=paste("X")
dataClean
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
corVector[,order(corVector[2,])]
dataClean[,12]=dataClean[,3]
names(dataClean)[12]=paste("X")
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
str(dataClean)
corVector[,order(corVector[2,])]
dataClean
corVector[,order(corVector[2,])]
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # raw data
dataClean=dataM[which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])),] # clean data
str(dataClean)
getCor2 <- function(x){
a=cor.test(dataClean[,1],dataClean[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataClean)-1)
corVector=sapply(ind+1,getCor2)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
a
str(dataClean)
dataClean[,12]=dataClean[,2]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
dataClean[,12]=dataClean[,3]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
corVector[,order(corVector[2,])]
dataClean[,12]=dataClean[,5]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM[which((dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2]),]
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # raw data
dataClean=dataM[which((dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])),] # clean data
str(dataClean)
getCor2 <- function(x){
a=cor.test(dataClean[,1],dataClean[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataClean)-1)
corVector=sapply(ind+1,getCor2)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
dataClean[,12]=dataClean[,5]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
dataM[which((dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2])),]
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
plot(dataM$X4, dataM$Y, xlim=range(dataM$X4), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$Y,n=1)
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X1,n=1)
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X1,dataM$Y,n=1)
plot(dataM$X4, dataM$Y, xlim=range(dataM$X4), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X4,dataM$Y,n=1)
ppInt=predict(model1, int="p", newdata=data.frame(X=dataM$X),level=0.95)
(dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2])
(dataM$Y<ppInt[,3]) & (dataM$Y>ppInt[,2])
dataM[which((dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2])),]
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X1,dataM$Y,n=3)
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X1,dataM$Y,n=6)
plot(dataM$X1, dataM$Y, xlim=range(dataM$X1), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
x1out=identify(dataM$X1,dataM$Y,n=11)
x1out
plot(dataM$X4, dataM$Y, xlim=range(dataM$X4), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
identify(dataM$X4,dataM$Y,n=1)
x2out=which((dataM$Y>=ppInt[,3]) | (dataM$Y<=ppInt[,2]))
dataM[x2out,]
dataM[x4out,]
dataM[x1out,]
unique(x1out,x2out,x4out)
unique(c(x1out,x2out,x4out))
c(x1out,x2out,x4out)
plot(dataM$X4, dataM$Y, xlim=range(dataM$X4), ylim=range(dataM$Y),
pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
x4out=identify(dataM$X4,dataM$Y,n=1)
dataM[x4out,]
dataM[x1out,]
dataM[x2out,]
unique(c(x1out,x2out,x4out))
totalOut=unique(c(x1out,x2out,x4out))
totalOut
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # raw data
dataClean=dataM[-totalOut,] # clean data
str(dataClean)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # raw data
dataClean=dataM[-totalOut,] # clean data
str(dataClean)
getCor2 <- function(x){
a=cor.test(dataClean[,1],dataClean[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataClean)-1)
corVector=sapply(ind+1,getCor2)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
dataClean[,12]=dataClean[,5]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
dataClean[,12]=dataClean[,2]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
dataClean[,12]=dataClean[,3]
names(dataClean)[12]=paste("X")
str(dataClean)
model2=lm(Y ~ X,data = dataClean)
summary(model2)
minX=floor(min(dataClean$X))
maxX=floor(max(dataClean$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model2, int="p", newdata=predData,level=0.95)
pc <- predict(model2, int="c", newdata=predData)
plot(dataClean$X, dataClean$Y, xlim=range(dataClean$X),
ylim=range(dataClean$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model2, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
read_excel("Data\\Cars_raw.xls",sheet=1)
model3=lm(Y ~ X1+X2+X4,data = dataClean)
model3
summary(model3)
mean(dataClean$Y)
str(model3)
corVector[,order(corVector[2,])]
deviance(model3)
sqrt(deviance(model3))
model3=lm(Y ~ X4+X1,data = dataClean)
summary(model3)
str(model3)
mean(dataClean$Y)
sqrt(deviance(model3))
mY=mean(dataClean$Y)
se=sqrt(deviance(model3)/(model3$df.residual))
rse=se/mY
rse
se=sqrt(deviance(model3)/(model3$df.residual))
summary(model3)
(se=sqrt(deviance(model3)/(model3$df.residual)))
str(model3)
model4=lm(Y ~ X4+X1+X2,data = dataClean)
summary(model4)
summary(model3)
summary(model4)
(rse4=se4/mY)
(se4=sqrt(deviance(model4)/(model4$df.residual)))
(rse4=se4/mY)
corTable
corTable(dataClean)
corTable=cor.table(dataClean)
corTable=cor(dataClean)
corTable
modelX2QMC=lm(X2 ~ X4+X1,data = dataClean)
summary(modelX2QMC)
corVector[,order(corVector[2,])]
rm(list=ls())                             ###### Exercise 6 ######
install.packages("DAAG")
library("DAAG")
data(ant111b,package = "DAAG")
ant111b
data(iris)
str(iris)
data("skulls", package = "HSAUR")
means <- aggregate(skulls[, c("mb", "bh", "bl", "nh")], list(epoch = skulls$epoch), mean)
means
plot.design(skulls)
plot(skulls)
skulls_manova <- manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
summary(skulls_manova, test = "Pillai")
summary(skulls_manova, test = "Wilks")
summary(skulls_manova, test = "Hotelling-Lawley")
summary(skulls_manova, test = "Roy")
summary.aov(manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls))
summary.aov(manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls))
str(iris3)
iris3
str(iris3)
install.packages("HSAUR")
data(foster, package = "HSAUR")
??foster
str(foster)
edit(foster)
table(foster$litgen,foster$motgen) #unbalanced
tapply(foster$weight, foster$litgen, mean)
tapply(foster$weight, foster$motgen, mean)
tapply(foster$weight, list(foster$litgen,foster$motgen), mean)
tapply(foster$weight, foster$litgen, sd)
tapply(foster$weight, foster$motgen, sd)
tapply(foster$weight, foster$litgen, shapiro.test)
tapply(foster$weight, foster$motgen, shapiro.test)
plot.design(foster)
bartlett.test(weight ~ litgen,data = foster)
bartlett.test(weight ~ motgen,data = foster)
oneway.test(weight ~ litgen,data=foster,var.equal = TRUE)
oneway.test(weight ~ litgen,data=foster,var.equal = FALSE)
oneway.test(weight ~ motgen,data=foster,var.equal = TRUE)
oneway.test(weight ~ motgen,data=foster,var.equal = FALSE)
anova(lm(weight~motgen,data=foster))
oneway.test(weight ~ litgen,data=foster,var.equal = TRUE)
oneway.test(weight ~ motgen,data=foster,var.equal = TRUE)
w_aov<-aov(weight ~ motgen,data = foster)
summary(w_aov)
str(w_aov)
coefficients(w_aov)
residuals(w_aov)
w_aov$contrasts
mean(foster$weight)
options("contrasts")
w_aov_sum<-aov(weight ~ motgen,data = foster,contrasts = list(motgen=contr.sum))
coef(w_aov_sum)
tapply(foster$weight, foster$motgen, mean)
w_aov<-aov(weight ~ motgen,data = foster)
coefficients(w_aov)
w_aov_sum<-aov(weight ~ motgen,data = foster,contrasts = list(motgen=contr.sum))
coef(w_aov_sum)
kruskal.test(weight ~ motgen,data = foster)
kruskal.test(weight ~ litgen,data = foster)
data("weightgain", package = "HSAUR")
??weightgain
table(weightgain$source,weightgain$type) # balanced
tapply(weightgain$weightgain, list(weightgain$source,weightgain$type), mean)
tapply(weightgain$weightgain, weightgain$source, shapiro.test)
tapply(weightgain$weightgain, weightgain$type, shapiro.test)
nt=tapply(weightgain$weightgain, list(weightgain$source,weightgain$type), shapiro.test)
nt[1,1];nt[1,2];nt[2,1];nt[2,2]
tapply(weightgain$weightgain, list(weightgain$source,weightgain$type), sd)
plot(weightgain)
plot.design(weightgain)
interaction.plot(weightgain$type, weightgain$source,weightgain$weightgain)
wg_aov <- aov(weightgain ~ source * type, data = weightgain)
wg_aov <- aov(weightgain ~ source * type, data = weightgain)
summary(wg_aov)
coef(wg_aov)
tapply(weightgain$weightgain, list(weightgain$source,weightgain$type), mean)
coef(aov(weightgain ~ source + type + source:type,
data = weightgain, contrasts = list(source = contr.sum)))
data("skulls", package = "HSAUR")
means <- aggregate(skulls[, c("mb", "bh", "bl", "nh")], list(epoch = skulls$epoch), mean)
means
plot.design(skulls)
skulls_manova <- manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls)
summary(skulls_manova, test = "Pillai")
summary(skulls_manova, test = "Wilks")
summary(skulls_manova, test = "Hotelling-Lawley")
summary(skulls_manova, test = "Roy")
summary.aov(manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls))
summary.aov(manova(cbind(mb, bh, bl, nh) ~ epoch, data = skulls))
rm(list=ls())                ######### APPLIED STATISTICS -> EXERCISE 11 #######
rm(list=ls())                ######### APPLIED STATISTICS -> EXERCISE 11 #######
### ANOVA ###
install.packages("HSAUR")
data(foster, package = "HSAUR")
??foster
