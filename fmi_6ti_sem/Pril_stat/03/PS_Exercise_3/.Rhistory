abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,2.5,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,3,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=seq(1,5,length.out = 10))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=1:10)
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=1.5)
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=seq(1,5,length.out = 10))
plot(1:25,pch=1:25,cex=seq(1,3,length.out = 10))
seq(1,3,length.out = 10)
plot(1:25,pch=1:25,cex=seq(1,3,length.out = 25))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
plot(1:25,pch=1:25,cex=seq(3,1,length.out = 25))
abline(v=1:10,lty=1:10,col=c(1:8,rgb(0.5,0.5,0.5),rgb(165/255,75/255,165/255)),lwd=10:1)
boxplot(approx.Pi)
hist(approx.Pi,probability = TRUE)
abline(v=emp.limits,col=2,lty=2)
abline(v=emp.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
abline(v=th.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
hist(approx.Pi,probability = TRUE)
abline(v=th.limits,col=2,lty=2,lwd=2)
abline(v=emp.limits,col=3,lty=2)
boxplot(approx.Pi)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
norm.contaminated.sample(100,1,proportion=1/5,size=20)
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
а=norm.contaminated.sample(100,1,2,1,proportion=1/5,size=10000)
p=runif(size,0,1)>proportion;
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
а=norm.contaminated.sample(100,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
а=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
mean(а)
boxplot(data)
data=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
boxplot(data)
hist(data)
data=norm.contaminated.sample(0,1,2,1,proportion=1/5,size=10000)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
a=density(w,bw="SJ")
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(w), sd=sd(w)), add=TRUE, col=2,lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
mean(data)
8/5
data=norm.contaminated.sample(0,1,2,1,proportion=4/5,size=10000)
mean(data)
2/5;mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=9/10,size=10000)
2/5; mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=4/5,size=10000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=10000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
t_stat=(mean(data)-1)/sd(data)
t_stat
mean(data)
sd(data)
t.test(data, mu=1)
shapiro.test(data)
data
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=1000)
mean(data)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
mu=mean(data);
sd=sd(data);
tStat=(mu-1)/sd(data)
(mu=mean(data))
(sd=sd(data))
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd(data))
shapiro.test(data)
t.test(data, mu=1)
shapiro.test(data)
(tStat=(mu-1)/sd(data))
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd(data))
(tStat=(mu-1)/sd)
t.test(data, mu=1)
t.test(data, mu=1)
shapiro.test(data)
(tStat=1000*(mu-1)/sd)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=1000)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=(mu-1)/sd)
t.test(data, mu=1)
(tStat=sqrt(1000)*(mu-1)/sd)
t.test(data, mu=1)
dt(tStat,1000-1)
t.test(data, mu=1)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
dt(tStat,100-1)
t.test(data, mu=1)
qt(0.05,100-1)
dt(tStat,100-1)
dt(-1.66,100-1)
qt(0.05,100-1)
qt(0.04,100-1)
qt(0.02,10000-1)
alpha=0.05;
qt(alpha/2,100-1)
tStat
dt(tStat,100-1)
t.test(data, mu=1)
1-dt(tStat,100-1)
dt(1.66,100-1)
dt(100,100-1)
dt(2,100-1)
dt(2.05,100-1)
criticalValue=qt(alpha/2,100-1)
criticalValue
criticalValue=qt(1-alpha/2,100-1)
criticalValue
(p-value=2*dt(tStat,100-1))
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
(p-value=2*dt(tStat,100-1))
(pValue=2*dt(tStat,100-1))
t.test(data, mu=1)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
tStat
dt(tStat,100-1)
(pValue=dt(tStat,100-1)/2)
t.test(data, mu=1)
t.test(data, mu=1)
criticalValue
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
choose(10000,655)
choose(1000,655)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
norm.contaminated.sample <-function(mu1,sigma1,mu2=0,sigma2=1,proportion=1/2,size=1){
p=runif(size,0,1)>proportion;
return(rnorm(size,mu1+(mu2-mu1)*p,sigma1+(sigma2-sigma1)*p))
}
norm.contaminated.sample(100,1,proportion=1/5,size=20)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
data=norm.contaminated.sample(0,1,4,1,proportion=3/4,size=100)
boxplot(data,col = "lightgrey",outcol="red", outlwd=2)
d=density(data,bw="SJ")
h=hist(data,prob=TRUE)
lines(d,col='blue',lwd=2)
curve(dnorm(x, mean=mean(data), sd=sd(data)), add=TRUE, col=2,lwd=2)
(mu=mean(data))
(sd=sd(data))
(tStat=sqrt(100)*(mu-1)/sd)
alpha=0.05;
(criticalValue=abs(qt(alpha/2,100-1)))
t.test(data, mu=1)
?dt
tStat
dt(tStat)
dt(tStat,df=99)
dt(tStat,df=99,lower.tail=TRUE)
qt(tStat,df=99,lower.tail=TRUE)
pt(tStat,df=99,lower.tail=TRUE)
pt(tStat,df=99,lower.tail=FALSE)
2*pt(abs(tStat),df=99,lower.tail=FALSE)
(p_value=2*pt(abs(tStat),df=99,lower.tail=FALSE))
t.test(data, mu=1)
shapiro.test(data)
shapiro.test(rnorm(100))
(mu=mean(data))
(sd=sd(data))
mean.and.sd(data)
mean.and.sd <- function(x){
av <- mean(x)
sdev <- sd(x)
return(c(mean=av, SD=sdev))
}
mean.and.sd(data)
ks.test(data,"normal")
ks.test(data,"pnorm")
qqplot(data)
rm(list = ls()) # rm() -----> remove objects; ls() -----> list of all objects
meanCI = function(x,sigma=sd(x),confLevel=0.95){
if (confLevel>=1 || confLevel<=0)
{return ("The value of confLevel should be in the interval (0,1)")}
else{
n = length(x)
meanX = mean(x)
alpha = 1 - confLevel
se = sigma/sqrt(n)
if (missing(sigma))
{cv = qt(1-alpha/2,df=n-1)}
else {cv=qnorm(1-alpha/2)}
return(c(lowerBound=meanX-cv*se,upperBound=meanX+cv*se))
}
}
x=rnorm(100,0,1.5)
meanCI(x)
meanCI(x,sd(x))
m1<-matrix(1,nrow=2,ncol=3)
(m2<-matrix(c(1,2,3),nrow=2,ncol=3))
dim(m2)
m1+m2
1+m2
(m3<-matrix(1:6,ncol=3))
c(1,2)*m3
m3*c(1,2)
c(1,2,3)*m3
c(1,2)%*%m3
t(m1)
t(m1)%*%m1
m22<-t(m2)%*%m2
m22[1,3]<-99
solve(m22)
m22[2,]
m22[c(1,2),c(1,3)]
m22[-c(1,2),-c(1)]
(m4<-matrix(c(1,2,3),nrow=3,ncol=3))
m4[2,1]<-4
m4[,1]
diag(m4)<-5
n<-4
(m<-matrix(1:n,nrow=n,ncol=n))
cbind(m,m)
rbind(m,m)
colSums(m)
rowSums(m)
v1<-1:10
v2<-seq(0,1,length=10)
v3<-letters[1:10]
d1<-data.frame(vector1=v1,vector2=v2,ABC=v3)
str(d1)
d1$ABC
d1$binary <-c(rep(TRUE,times=5),rep(FALSE,times=5))
d2<-data.frame(vector1=v1,ABC=v3,stringsAsFactors =FALSE)
d2$factor<-as.factor(rep(c("male","female"),times=5))
str(d2)
data(mtcars)
mtcars
head(mtcars)
edit(mtcars)
str(mtcars)
colnames(mtcars)[1:5]
rownames(mtcars)[1:5]
mtcars$mpg
mtcars[,1]
mtcars[1,]
edit(mtcars)
data()
data("longley")
edit(longley)
save(mtcars,file = "Data/testData1.rda")
save(mtcars,file = "Data/testData1.rda")
save(mtcars,iris,file = "Data/testData2.rda")
rm(list=ls())
load("Data/testData2.rda")
ls()
list.files()
file.path("Data/testData2.rda")
install.packages("data.table")        # install package
installed.packages()                  # installed packages
update.packages()                     # keep up to date all packages
write.table(mtcars,file = "Data/mmtcars.txt", row.names = FALSE)
df <- read.table("Data/mmtcars.txt")
write.csv(women,"Data/wData.csv")
read.csv("Data/wData.csv")
x<-read.table("https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt")
str(x)
nrow(x)
ncol(x)
x
str(x)
nrow(x)
ncol(x)
colnames(x)<-c("Var1", "Var2","Var3")
rownames(x)<-x[,1]
names(x)
y<-x[1:5,2:3]
y
library(readxl)
datasets<-system.file("extdata/datasets.xlsx",package = "readxl")
data_iris=read_excel(datasets)
data_mtcars=read_excel(datasets,sheet = 2)
str(data_mtcars)
data_mtcars=data.frame(data_mtcars)
data_mtcars[,2]<-as.factor(data_mtcars[,2])
data_mtcars[,8]<-as.factor(data_mtcars[,8])
str(data_mtcars)
levels(data_mtcars[,2])<-c("4-Cylinder","6-Cylinder","8-Cylinder")
levels(data_mtcars[,8])<-c("V-shaped","Standard")
tab<-table(data_mtcars[,2],data_mtcars[,8])
write.csv2(tab,file = "Data/Engines.csv")
tab
rm(list=ls())                                ### Задача 4 ###
rm(list=ls())                                ### Задача 1 ###
meanCI = function(x,sigma=sd(x),confLevel=0.95){
if (confLevel>=1 || confLevel<=0)
{return ("The value of confLevel should be in the interval (0,1)")}
else{
n = length(x)
meanX = mean(x)
alpha = 1 - confLevel
se = sigma/sqrt(n)
if (missing(sigma))
{cv = qt(1-alpha/2,df=n-1)}
else {cv=qnorm(1-alpha/2)}
return(c(lowerBound=meanX-cv*se,upperBound=meanX+cv*se))
}
}
x=rnorm(100,0,1.5)
meanCI(x)
meanCI(x,sd(x))
m1<-matrix(1,nrow=2,ncol=3)
(m2<-matrix(c(1,2,3),nrow=2,ncol=3))
dim(m2)
m1+m2
1+m2
(m3<-matrix(1:6,ncol=3))
c(1,2)*m3
m3*c(1,2)
c(1,2,3)*m3
c(1,2)%*%m3
t(m1)
t(m1)%*%m1
m22<-t(m2)%*%m2
m22[1,3]<-99
solve(m22)
m22[2,]
m22[c(1,2),c(1,3)]
m22[-c(1,2),-c(1)]
(m4<-matrix(c(1,2,3),nrow=3,ncol=3))
m4[2,1]<-4
m4[,1]
diag(m4)<-5
n<-4
(m<-matrix(1:n,nrow=n,ncol=n))
cbind(m,m)
rbind(m,m)
colSums(m)
rowSums(m)
v1<-1:10
v2<-seq(0,1,length=10)
v3<-letters[1:10]
d1<-data.frame(vector1=v1,vector2=v2,ABC=v3)
str(d1)
d1$ABC
d1$binary <-c(rep(TRUE,times=5),rep(FALSE,times=5))
d2<-data.frame(vector1=v1,ABC=v3,stringsAsFactors =FALSE)
d2$factor<-as.factor(rep(c("male","female"),times=5))
str(d2)
data(mtcars)
mtcars
data(mtcars)
d=data(mtcars)
mtcars
head(mtcars)
edit(mtcars)
str(mtcars)
colnames(mtcars)[1:5]
rownames(mtcars)[1:5]
mtcars$mpg
mtcars[,1]
mtcars[1,]
data()
save(mtcars,file = "Data/testData1.rda")
save(mtcars,iris,file = "Data/testData2.rda")
rm(list=ls())
load("Data/testData2.rda")
ls()
list.files()
file.path("Data/testData2.rda")
install.packages("data.table")        # install package
installed.packages()                  # installed packages
?data.table                           # read
??data.table                           # read
?fread                                # read
library(data.table)                   # load package
?data.table                           # read
?fread                                # read
write.csv(women,"Data/wData.csv")
read.csv("Data/wData.csv")
x<-read.table("https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt")
x
str(x)
nrow(x)
ncol(x)
colnames(x)<-c("Var1", "Var2","Var3")
rownames(x)<-x[,1]
names(x)
y<-x[1:5,2:3]
y
library(readxl)
datasets<-system.file("extdata/datasets.xlsx",package = "readxl")
data_iris=read_excel(datasets)
data_mtcars=read_excel(datasets,sheet = 2)
str(data_mtcars)
data_mtcars=data.frame(data_mtcars)
data_mtcars[,2]<-as.factor(data_mtcars[,2])
data_mtcars[,8]<-as.factor(data_mtcars[,8])
str(data_mtcars)
levels(data_mtcars[,2])<-c("4-Cylinder","6-Cylinder","8-Cylinder")
levels(data_mtcars[,8])<-c("V-shaped","Standard")
tab<-table(data_mtcars[,2],data_mtcars[,8])
write.csv2(tab,file = "Data/Engines.csv")
tab
hist(normal,probability = TRUE)
normal<-rnorm(100)
hist(normal,probability = TRUE)
qqnorm(normal,main = "Normal Dist")
qqline(normal,col=2)
tdist<-rt(100,df=3)
hist(tdist,probability = TRUE)
qqnorm(tdist,main = "T Dist")
qqnorm(tdist,main = "T Dist")
qqline(tdist,col=2)
hist(tdist,probability = TRUE)
tdist<-rt(100,df=3)
hist(tdist,probability = TRUE)
shapiro.test(normal)
shapiro.test(tdist)
cor.test(normal,tdist,method = ("pearson"))
shapiro.test(mtcars$mpg)
row1=tapply(water$mortality,water$location,mean)
data(water,package = "HSAUR")
morSouth=water$mortality[water$location=="South"]
morNorth=water$mortality[water$location=="North"]
hardSouth=water$hardness[water$location=="South"]
hardNorth=water$hardness[water$location=="North"]
ks.test(morSouth,morNorth)
ks.test(hardSouth,hardNorth)
cor.test(~mortality + hardness, data = water)
t.test(mortality~location,data=water)
t.test(mortality~location,data=water)
t.test(mpg~am,data=mtcars)
t.test(mpg~am,data=mtcars,var.equal=TRUE)
t.test(mpg~am,data=mtcars)
t.test(mpg~am,data=mtcars,var.equal=TRUE)
var.test(mpg~am,data=mtcars)
var.test(mpg,am,data=mtcars)
mpg~am,data=mtcars
var.test(mpg~am,data=mtcars)
rm(list=ls())                                ### Задача 1 ###
