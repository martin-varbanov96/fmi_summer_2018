{
    "collab_server" : "",
    "contents" : "                       ############ APPLIED STATISTICS -> EXERCISE 3 ############\n\nrm(list=ls())                                ### Задача 1 ###\n# Напишете функция, която връща доверителен интервал (lowerBound и upperBound) с ниво \n# confLevel (с default value 0.95) за средното на извадка x. Като изполвате функцията \n# missing(), конструирайте функцията така, че да използва нормално разпределение или\n# Student разпределение според входните аргументи. Направете проверка за входната стойност \n# на аргумета confLevel.\n\n                       \n                       \n                       \n                       \n                       \n                       \n                       \n                                                             \n\n                                            ##### Matrix #####\nm1<-matrix(1,nrow=2,ncol=3)\n(m2<-matrix(c(1,2,3),nrow=2,ncol=3))\ndim(m2)\nm1+m2\n1+m2\n\n(m3<-matrix(1:6,ncol=3))\nc(1,2)*m3\nm3*c(1,2)\nc(1,2,3)*m3\n\nc(1,2)%*%m3\n\nt(m1)\nt(m1)%*%m1\nm22<-t(m2)%*%m2\nm22[1,3]<-99\nsolve(m22)\nm22[2,]\nm22[c(1,2),c(1,3)]\nm22[-c(1,2),-c(1)]\n\n(m4<-matrix(c(1,2,3),nrow=3,ncol=3))\nm4[2,1]<-4\nm4[,1]\ndiag(m4)<-5\n\nn<-4\n(m<-matrix(1:n,nrow=n,ncol=n))\n\ncbind(m,m)\nrbind(m,m)\ncolSums(m)\nrowSums(m)\n\n                                      ### Data frames ###\nv1<-1:10\nv2<-seq(0,1,length=10)\nv3<-letters[1:10]\nd1<-data.frame(vector1=v1,vector2=v2,ABC=v3)\nstr(d1)\nd1$ABC\nd1$binary <-c(rep(TRUE,times=5),rep(FALSE,times=5))\n\nd2<-data.frame(vector1=v1,ABC=v3,stringsAsFactors =FALSE)\nd2$factor<-as.factor(rep(c(\"male\",\"female\"),times=5))\nstr(d2)\n\n                                      # mtcars dataset\ndata(mtcars)\nmtcars\nhead(mtcars)\nedit(mtcars)\nstr(mtcars)\ncolnames(mtcars)[1:5]\nrownames(mtcars)[1:5]\nmtcars$mpg\nmtcars[,1]\nmtcars[1,]\n\n                                    #### Import/Export ####\n\nedit(mtcars)\ndata()\ndata(\"longley\")\nedit(longley)\n\nsave(mtcars,file = \"Data/testData1.rda\")\nsave(mtcars,iris,file = \"Data/testData2.rda\")\nrm(list=ls())\nload(\"Data/testData2.rda\")\nls()\nlist.files()\nfile.path(\"Data/testData2.rda\")\n\ninstall.packages(\"data.table\")        # install package\ninstalled.packages()                  # installed packages\nupdate.packages()                     # keep up to date all packages\nlibrary(data.table)                   # load package \nrequire(data.table)                   # load package \n?data.table                           # read\n?fread                                # read\n\nwrite.table(mtcars,file = \"Data/mmtcars.txt\", row.names = FALSE)\ndf <- read.table(\"Data/mmtcars.txt\")\n\nwrite.csv(women,\"Data/wData.csv\")\nread.csv(\"Data/wData.csv\")\n\nx<-read.table(\"https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt\")\nx\nstr(x)\nnrow(x)\nncol(x)\ncolnames(x)<-c(\"Var1\", \"Var2\",\"Var3\") \nrownames(x)<-x[,1]\nnames(x)\ny<-x[1:5,2:3]\ny\n\nlibrary(readxl)\ndatasets<-system.file(\"extdata/datasets.xlsx\",package = \"readxl\")\ndata_iris=read_excel(datasets)\n\n                                        ### Задача 2 ###  \n# Запишете данните от втория sheet на файла от datasets в променлива data_mtcars.  \n# Преобразувайте data_mtcars в data.frame и променете втората и осмата променливи\n# като факторни променливи. Задайте подходящи имена на нивата на тези две променливи.\n# Използвайки функцията table(), запиште честотната таблица на факторните променливи\n# в нов файл \"Engines.csv\" в папката \"Data\".\n\ndata_mtcars=read_excel(datasets,sheet = 2)\nstr(data_mtcars)\ndata_mtcars=data.frame(data_mtcars)\ndata_mtcars[,2]<-as.factor(data_mtcars[,2])\ndata_mtcars[,8]<-as.factor(data_mtcars[,8])\nstr(data_mtcars)\nlevels(data_mtcars[,2])<-c(\"4-Cylinder\",\"6-Cylinder\",\"8-Cylinder\")\nlevels(data_mtcars[,8])<-c(\"V-shaped\",\"Standard\")\ntab<-table(data_mtcars[,2],data_mtcars[,8])\nwrite.csv2(tab,file = \"Data/Engines.csv\")\n###############################################################################################\n\n                              ########### Statistical test ##########\n\nnormal<-rnorm(100)\nhist(normal,probability = TRUE)\nqqnorm(normal,main = \"Normal Dist\")\nqqline(normal,col=2)\n\ntdist<-rt(100,df=3)\nhist(tdist,probability = TRUE)\nqqnorm(tdist,main = \"T Dist\")\nqqline(tdist,col=2)\n\nshapiro.test(normal)\nshapiro.test(tdist)\n\n                                          ### Задача 3 ###  \n# Постройте хистограма на данните mpg от mtcars и сравнете разпледелението им с нормалното  \n# чрез q-q plot. Използвайки теста на Shapiro-Wilk, проверете хипотезата за нормално \n# разпределение на mpg. Какви изводи може да направите? \n\n\n\n\n\n\n\n\n##############################################################################################\nndata<-rnorm(1000,mean = mean(mtcars$mpg), sd= sd(mtcars$mpg))\nqqnorm(ndata,main = \"Sample Dist\")\nqqline(ndata,col=2)\nks.test(mtcars$mpg,ndata)\n\ncor.test(normal,tdist,method = (\"pearson\"))\ncor.test(mtcars$hp,mtcars$cyl,method = (\"pearson\"))\ncor.test(mtcars$hp,mtcars$cyl,method = (\"kendall\"))\ncor.test(mtcars$hp,mtcars$cyl,method = (\"spearman\"))\n\nmean(mtcars$cyl)\nt.test(mtcars$cyl,alternative = (\"two.sided\"),mu=6)\nmean(mtcars$mpg)\nt.test(mtcars$mpg,alternative = (\"less\"),mu=20)\n\nt.test(mpg~am,data=mtcars)\nt.test(mpg~am,data=mtcars,var.equal=TRUE)\nvar.test(mpg~am,data=mtcars)\n\n##############################################################################################\n\ninstall.packages(\"HSAUR\")         # Install package for datasets\n\n                                          ### Задача 4 ###\n# Като използвате данните \"water\" от пакета \"HSAUR\", проверете дали има зависимост \n# между смъртността и положението на населеното място, както и между твърдостта \n# на водата и положението на населеното място.\n\ndata(water,package = \"HSAUR\")\n??water\nstr(water)\nedit(water)\n\nmorSouth=water$mortality[water$location==\"South\"]\nmorNorth=water$mortality[water$location==\"North\"]\nhardSouth=water$hardness[water$location==\"South\"]\nhardNorth=water$hardness[water$location==\"North\"]\nks.test(morSouth,morNorth)\nks.test(hardSouth,hardNorth)\n\ncor.test(~mortality + hardness, data = water)\nt.test(mortality~location,data=water)\nt.test(hardness~location,data=water)\nrow1=tapply(water$mortality,water$location,mean)\nrow2=tapply(water$hardness,water$location,mean)\ntab=rbind(row1,row2)\nrownames(tab)=c(\"mortality\",\"hardness\")\ntab\n\n                                            ### Задача 5 ###\n# Като използвате данните \"waves\" от пакета \"HSAUR\", проверете дали има значима разлика\n# между двата метода на закрепване (mooring).\n\n\n\n\n\n",
    "created" : 1520407885225.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "569264304",
    "id" : "3C4F1B61",
    "lastKnownWriteTime" : 1520407982,
    "last_content_update" : 1520407982032,
    "path" : "C:/Stuffs/books/Acer_math/PS/PS_Exercise_3/Script_exercise_3.R",
    "project_path" : "Script_exercise_3.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}