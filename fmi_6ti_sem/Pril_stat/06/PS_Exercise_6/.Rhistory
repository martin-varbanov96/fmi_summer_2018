corTable
test=cor.test(dataM[,1],dataM[,2])
str(test)
getCor <- function(x){
a=cor.test(dataM[,1],dataM[,x])
return(c(est=a$estimate,pValue=a$p.value))
}
ind=1:(length(dataM)-1)
corVector=sapply(ind+1,getCor)
corVector
colnames(corVector)=mapply(paste,"X",ind,sep="")
corVector[,order(corVector[2,])]
dataM[,12]=dataM[,3]
names(dataM)[12]=paste("X")
str(dataM)
model1=lm(Y ~ X,data = dataM)
summary(model1)
minX=floor(min(dataM$X))
maxX=floor(max(dataM$X))+1
predData <- data.frame(X=minX:maxX)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(dataM$X, dataM$Y, xlim=range(dataM$X),
ylim=range(dataM$Y, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('topright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
par(mfrow=c(1,1))
rm(list=ls())                   #### Simple Linear Regression ####
options(na.action=na.omit)
alpha=0.10
model1=lm(short.velocity ~ blood.glucose,data=thuesen)
residuals1=resid(model1)
se=sqrt(sum(residuals1^2)/(model1$df.residual))
cv=qnorm(alpha/2,0,se,lower.tail=TRUE)
data("thuesen",package = "ISwR")
model1=lm(short.velocity ~ blood.glucose,data=thuesen)
residuals1=resid(model1)
se=sqrt(sum(residuals1^2)/(model1$df.residual))
cv=qnorm(alpha/2,0,se,lower.tail=TRUE)
mv = is.na(thuesen$short.velocity)
plot(thuesen$blood.glucose[!mv], thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), pch=16, xlim=c(0,20), ylim=c(1,2))
abline(model1,col=2, lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), lty=2)
minBG=floor(min(thuesen$blood.glucose))
options(na.action=na.exclude) # exclude NA's
model1=lm(formula = theFormula,data=thuesen)
fitted(model1)
options(na.action=na.exclude) # exclude NA's
model1=lm(formula = theFormula,data=thuesen)
theFormula = short.velocity ~ blood.glucose
options(na.action=na.exclude) # exclude NA's
model1=lm(formula = theFormula,data=thuesen)
fitted(model1)
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)
options(na.action=na.exclude)
alpha=0.10
model1=lm(short.velocity ~ blood.glucose,data=thuesen)
residuals1=resid(model1)
se=sqrt(sum(residuals1^2)/(model1$df.residual))
cv=qnorm(alpha/2,0,se,lower.tail=TRUE)
plot(thuesen$blood.glucose, thuesen$short.velocity,
col = 1+(abs(residuals1)>=abs(cv)), pch=16, xlim=c(0,20), ylim=c(1,2))
abline(model1,col=2, lwd=2)
segments(thuesen$blood.glucose,fitted(model1),
thuesen$blood.glucose,thuesen$short.velocity,
col = 1+(abs(residuals1)>=abs(cv)), lty=2)
minBG=floor(min(thuesen$blood.glucose))
plot(thuesen$blood.glucose, thuesen$short.velocity,
col = 1+(abs(residuals1)>=abs(cv)), pch=16, xlim=c(0,20), ylim=c(1,2))
options(na.action=na.omit)
alpha=0.10
model1=lm(short.velocity ~ blood.glucose,data=thuesen)
residuals1=resid(model1)
se=sqrt(sum(residuals1^2)/(model1$df.residual))
cv=qnorm(alpha/2,0,se,lower.tail=TRUE)
mv = is.na(thuesen$short.velocity)
plot(thuesen$blood.glucose[!mv], thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), pch=16, xlim=c(0,20), ylim=c(1,2))
abline(model1,col=2, lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), lty=2)
minBG=floor(min(thuesen$blood.glucose))
maxBG=floor(max(thuesen$blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData)
pc <- predict(model1, int="c", newdata=predData)
plot(thuesen$blood.glucose,thuesen$short.velocity,
ylim=range(thuesen$short.velocity, pp, na.rm=T))
matlines(predData, pc[,2:3], lty=c(2,2),col=c(4,4))
matlines(predData, pp[,2:3], lty=c(3,3),col=c(2,2))
rm(list=ls())
data("thuesen",package = "ISwR")
with(thuesen,{
model1=lm(short.velocity ~ blood.glucose)
summary(model1)
minBG=floor(min(blood.glucose))
maxBG=floor(max(blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose, short.velocity, xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
})
install.packages("manipulate")
library(manipulate)
manipulate(
with(thuesen,{
model1=lm(short.velocity ~ blood.glucose)
summary(model1)
minBG=floor(min(blood.glucose))
maxBG=floor(max(blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose, short.velocity, xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
}),
x=slider(1,N))
manipulate(
with(thuesen,{
model1=lm(short.velocity ~ blood.glucose)
summary(model1)
minBG=floor(min(blood.glucose))
maxBG=floor(max(blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose, short.velocity, xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
}),
x=slider(1,10))
with(thuesen,{
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
summary(model1)
minBG=floor(min(blood.glucose[1:N]))
maxBG=floor(max(blood.glucose[1:N]))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
})
pp
predData
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
attach(thuesen)
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
summary(model1)
minBG=floor(min(blood.glucose[1:N]))
maxBG=floor(max(blood.glucose[1:N]))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
predData
pp
pc
predData
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pp
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
summary(model1)
detach(thuesen)
detach(Boston)
detach(Boston)
rm(list=ls())                   #### Simple Linear Regression ####
data("thuesen",package = "ISwR")
with(thuesen,{
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
})
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
with(thuesen,{
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
})
with(thuesen,{
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N], xlim=range(blood.glucose),
ylim=range(short.velocity),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
})
with(thuesen,{
N=5
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
})
with(thuesen,{
N=8
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
})
with(thuesen,{
model1=lm(short.velocity ~ blood.glucose)
summary(model1)
minBG=floor(min(blood.glucose))
maxBG=floor(max(blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose, short.velocity, xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
})
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(1,15))
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,15))
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3),
xlim=range(blood.glucose),  ylim=range(short.velocity))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,15))
range(thuesen$short.velocity)
range(thuesen$blood.glucose)
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3),
xlim=range(blood.glucose),  ylim=range(short.velocity, na.rm=T))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,15))
length(thuesen)
length(thuesen$short.velocity)
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3),
xlim=range(blood.glucose),  ylim=range(short.velocity, na.rm=T))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,length(thuesen$short.velocity)))
thuesen$short.velocity
options(na.action=na.exclude) # exclude NA's
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3),
xlim=range(blood.glucose),  ylim=range(short.velocity, na.rm=T))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,length(thuesen$short.velocity)))
rm(list=ls())                   #### Simple Linear Regression ####
rm(list=ls())                   #### Simple Linear Regression ####
install.packages("ISwR")
data("thuesen",package = "ISwR")
??thuesen
str(thuesen)
edit(thuesen)
options(na.action=na.omit) # omit NA's
attach(thuesen)
summary(thuesen)
plot(blood.glucose, short.velocity, xlim=c(0,20), ylim=c(1,2))
lm(short.velocity ~ blood.glucose)
model1=lm(short.velocity ~ blood.glucose)
detach(thuesen)
theFormula = short.velocity ~ blood.glucose
edit(thuesen)
lm(short.velocity ~ blood.glucose)
rm(list=ls())                   #### Simple Linear Regression ####
install.packages("ISwR")
data("thuesen",package = "ISwR")
??thuesen
str(thuesen)
edit(thuesen)
options(na.action=na.omit) # omit NA's
attach(thuesen)
summary(thuesen)
plot(blood.glucose, short.velocity, xlim=c(0,20), ylim=c(1,2))
lm(short.velocity ~ blood.glucose)
model1=lm(short.velocity ~ blood.glucose)
detach(thuesen)
theFormula = short.velocity ~ blood.glucose
model1=lm(formula = theFormula,data=thuesen)
model1
str(model1)
summary(model1)               # analysis summary
summary(model1)               # analysis summary
str(model1)
summary(model1)               # analysis summary
confint(model1,level = 0.95)  # confidence interval for regression coefficients
resid(model1)                 # residuals
fitted(model1)                # fitted values
deviance(model1)              # residual sum of squares
predict(model1,newdata=ndat)  # predict for new data
predict(model1,newdata=ndat)  # predict for new data
predict(model1)
x=as.data.frame(thuesen$blood.glucose[is.na(thuesen$short.velocity)])
names(x)="blood.glucose"
predict(model1,newdata=x)
sum(coef(model1)*c(1,as.numeric(x)))
plot(fitted(model1),resid(model1))
qqnorm(resid(model1))
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
points(thuesen$blood.glucose,predict(model1),pch=10)    # WRONG!
mv = is.na(thuesen$short.velocity)
points(thuesen$blood.glucose[-which(mv)],predict(model1),pch=10)
segments(thuesen$blood.glucose,fitted(model1),
thuesen$blood.glucose,thuesen$short.velocity) # WRONG!
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv])
options(na.action=na.exclude) # exclude NA's
model1=lm(formula = theFormula,data=thuesen)
fitted(model1)
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)
options(na.action=na.omit)
alpha=0.10
model1=lm(short.velocity ~ blood.glucose,data=thuesen)
residuals1=resid(model1)
se=sqrt(sum(residuals1^2)/(model1$df.residual))
cv=qnorm(alpha/2,0,se,lower.tail=TRUE)
mv = is.na(thuesen$short.velocity)
plot(thuesen$blood.glucose[!mv], thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), pch=16, xlim=c(0,20), ylim=c(1,2))
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), lty=2)
abline(model1,col=2, lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv],
col = 1+(abs(residuals1)>=abs(cv)), lty=2)
minBG=floor(min(thuesen$blood.glucose))
maxBG=floor(max(thuesen$blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData)
pc <- predict(model1, int="c", newdata=predData)
plot(thuesen$blood.glucose,thuesen$short.velocity,
ylim=range(thuesen$short.velocity, pp, na.rm=T))
matlines(predData, pc[,2:3], lty=c(2,2),col=c(4,4))
matlines(predData, pp[,2:3], lty=c(3,3),col=c(2,2))
rm(list=ls())
data("thuesen",package = "ISwR")
with(thuesen,{
model1=lm(short.velocity ~ blood.glucose)
summary(model1)
minBG=floor(min(blood.glucose))
maxBG=floor(max(blood.glucose))+1
predData <- data.frame(blood.glucose=minBG:maxBG)
pp <- predict(model1, int="p", newdata=predData,level=0.95)
pc <- predict(model1, int="c", newdata=predData)
plot(blood.glucose, short.velocity, xlim=range(blood.glucose),
ylim=range(short.velocity, pp, na.rm=T),pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3))
abline(model1, col=rgb(220/255,0,0), lwd=3)
# segments(blood.glucose,fitted(model1),blood.glucose,short.velocity,lty=2)
matlines(predData, pc[,2:3], lty=c(2,2),col=rgb(0,1/2,0),lwd=c(2,2))
matlines(predData, pp[,2:3], lty=c(3,3),col=rgb(0,0,0),lwd=c(2,2))
legend('bottomright',
legend = c('Regression line','Confidence lines','Prediction lines'),
col=c(rgb(220/255,0,0),rgb(0,1/2,0),rgb(0,0,0)),lty=c(1,2,3),lwd=c(3,2,2))
})
options(na.action=na.exclude) # exclude NA's
install.packages("manipulate")
library(manipulate)
manipulate(
with(thuesen,{
model1=lm(short.velocity[1:N] ~ blood.glucose[1:N])
plot(blood.glucose[1:N], short.velocity[1:N],pch=21,cex=1.5,bg=rgb(1/3,1/3,1/3),
xlim=range(blood.glucose),  ylim=range(short.velocity, na.rm=T))
abline(model1, col=rgb(220/255,0,0), lwd=3)
segments(blood.glucose[1:N],fitted(model1),blood.glucose[1:N],short.velocity[1:N],lty=2)
}),
N=slider(2,length(thuesen$short.velocity)))
library(readxl)
library(readxl)
read_excel("Data\\Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data\\Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
read_excel("Data/Cars_raw.xls",sheet=1)
dataM=as.data.frame(read_excel("Data/Cars_raw.xls",sheet=2)) # data for modelling
dataP=as.data.frame(read_excel("Data/Cars_raw.xls",sheet=3)) # data for predictions
str(dataM)
str(dataP)
?data
str(data)
edit(data)
?dataM
str(dataM)
edit(dataM)
View(dataM)
y_X1 = X1 ~ y
View(dataM)
y_X1 = Y ~ X1
cor(y_X1, data=dataM)
cor.test(y_X1, data=dataM)
View(thuesen)
y_X1 = Y ~ X1
y_X1 = Y ~ X1
cor.test(y_X1, data=dataM)
cor.test(Y ~ X1, data=dataM)
cor.test(X2 ~ X1, data=dataM)
View(dataM)
cor.test(dataM$X1, dataM$Y)
cor.test(y_X1)
y_X1 = Y ~ X1
cor.test(y_X1)
write.csv(dataM, "dataM.csv")
write.csv(dataP, "dataM.csv")
cor.test(My_X1)
y_X1 = Y ~ X1
cor.test(My_X1)
Y
cor.test(y_X1)
cor.test(y_X1, data=dataM)
y_X1 = Y ~ X1
cor.test(y_X1, data=dataM)
cor.test(
Error in cor.test.formula(y_X1, data = dataM) :
'formula' missing or invalid, data=dataM)
cor.test(Y ~ X1, data=dataM)
cor.test(Y, X1, data=dataM)
View(dataM)
