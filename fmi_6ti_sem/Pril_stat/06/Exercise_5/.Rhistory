chisq.test(dieBias,p=dieFair/sum(dieFair))
chisq.test(freq,p=probs)
dieFair = sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T)
dieBias = sample(1:6,100,p=c(0.5,1,1,1,1,1.5)/6,replace=T)
resFair = table(dieFair)
resBias = table(dieBias)
(freqTable=rbind(resFair,resBias))
chisq.test(freqTable)
chisq.test(dieBias,p=dieFair/sum(dieFair))
chisq.test(dieBias,p=dieFair/sum(dieFair))
chisq.test(dieBias,dieFair)
chisq.test(dieBias,p=dieFair/sum(dieFair))
chisq.test(dieFair,p=dieBias/sum(dieBias))
dieFair
dieBias
install.packages("UsingR")
data("pi2000",package = "UsingR")
str(pi2000)
t=table(pi2000)
t
n=length(t)
n
barplot(t/length(pi2000),
col=rgb(1:n,1:n,1:n,maxColorValue=n),cex.axis=1.5, cex.lab=1.5,cex.names=1.5,
xlab = "Digit",ylab = "Probability", main = "First 2000 Digits in PI")
abline(h=1/n,col=2,lty=2,lwd=3)
chisq.test(t,p=rep(1/n,n))
table(dieFair)
chisq.test(freq,p=probs)
chisq.test(roll,p=probs)
dieFair = sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T)
dieBias = sample(1:6,100,p=c(0.5,1,1,1,1,1.5)/6,replace=T)
tFair = table(dieFair)
tBias = table(dieBias)
tFair = ptable(dieFair)
tFair = prob.table(dieFair)
tFair = prop.table(dieFair)
tFair
tFair = table(dieFair)
tFair
tFair/sum(tFair)
chisq.test(tBias,p=tFair/sum(tFair))
tFair = table(dieFair)
tBias = table(dieBias)
chisq.test(tBias,p=tFair/sum(tFair))
chisq.test(tFair,p=tBias/sum(tBias))
tFair
chisq.test(dieBias,dieFair) # WRONG!!!!
rbind(tFair,tBias)
chisq.test(rbind(tFair,tBias))
rbind(tFair,tBias)
dieFair = as.factor(sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T))
dieBias = as.factor(sample(1:6,100,p=c(0.5,1,1,1,1,1.5)/6,replace=T))
chisq.test(dieBias,dieFair) # WRONG!!!!
tFair = table(dieFair)
tBias = table(dieBias)
chisq.test(rbind(tFair,tBias))
dieBias
chisq.test(dieBias,dieFair) # WRONG!!!!
chisq.test(rbind(tFair,tBias))
rbind(tFair,tBias)
dieFair = as.factor(sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T))
dieBias = as.factor(sample(1:6,100,p=c(0.5,1,1,1,1,1.5)/6,replace=T))
chisq.test(dieBias,dieFair) # WRONG!!!!
tBias = table(dieBias)
tFair = table(dieFair)
chisq.test(rbind(tFair,tBias))
dieFair = as.factor(sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T))
dieBias = as.factor(sample(1:6,100,p=c(0.5,1,1,1,1,1.5)/6,replace=T))
chisq.test(dieBias,dieFair) # WRONG!!!!
tFair = table(dieFair)
tBias = table(dieBias)
chisq.test(rbind(tFair,tBias))
dieFair = as.factor(sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T))
dieBias = as.factor(sample(1:6,100,p=c(0.5,0.5,0.5,1.5,1.5,1.5)/6,replace=T))
chisq.test(dieBias,dieFair) # WRONG!!!!
tFair = table(dieFair)
tBias = table(dieBias)
chisq.test(rbind(tFair,tBias))
rbind(tFair,tBias)
dieFair = as.factor(sample(1:6,100,p=c(1,1,1,1,1,1)/6,replace=T))
dieBias = as.factor(sample(1:6,100,p=c(0.5,0.5,0.5,1.5,1.5,1.5)/6,replace=T))
chisq.test(dieBias,dieFair) # WRONG!!!!
tFair = table(dieFair)
tBias = table(dieBias)
chisq.test(rbind(tFair,tBias))
rbind(tFair,tBias)
data(pistonrings,package = "HSAUR")
??pistonrings
str(pistonrings)
edit(pistonrings)
pistonrings
chisq.test(pistonrings)
summary(pistonrings)
data(water,package = "HSAUR")
??water
str(water)
edit(water)
morSouth=water$mortality[water$location=="South"]
morNorth=water$mortality[water$location=="North"]
hardSouth=water$hardness[water$location=="South"]
hardNorth=water$hardness[water$location=="North"]
ks.test(morSouth,morNorth)
ks.test(hardSouth,hardNorth)
cor.test(~mortality + hardness, data = water)
t.test(mortality~location,data=water)
t.test(hardness~location,data=water)
row1=tapply(water$mortality,water$location,mean)
row2=tapply(water$hardness,water$location,mean)
row1
row2
tab=rbind(row1,row2)
rownames(tab)=c("mortality","hardness")
tab
t.test(waves$method1,waves$method2,paired = TRUE)
data(waves,package = "HSAUR")
t.test(waves$method1,waves$method2,paired = TRUE)
ks.test(waves$method1,waves$method2)
cor.test(~method1 + method2, data = waves)
edit(waves)
riffle.shuffle(1:32)
riffle.shuffle(1:10)
riffle.shuffle(1:32)
riffle.shuffle(1:52)
plot(riffle.shuffle(1:32))
plot(1:32)
plot(riffle.shuffle(1:52))
plot(1:52)
plot(riffle.shuffle(1:52))
riffle.shuffle(1:10)
(rf=riffle.shuffle(1:52))
any((rf-1:N)>0)
N=52;
(rf=riffle.shuffle(1:N))
any((rf-1:N)>0)
if any((rf-1:N)>0)) {min(which((rf-1:N)>0))}
if (any((rf-1:N)>0))) {min(which((rf-1:N)>0))}
if (any((rf-1:N)>0)) {
min(which((rf-1:N)>0))
}
rf
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
}
else {split=N;}
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
}
else{split=N;}
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N;}
split
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
rf
split
plot(identity,col=2+(identity<split))
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
identity=1:N;
plot(identity,col=2+(identity<split))
plot(1:N,col=1:N)
plot(identity,col=2+2*(identity<split))
plot(riffle.shuffle(1:52),col=2+2*(identity<split))
plot(rf,col=2+2*(identity<split))
plot(rf,col=2+2*(rf<split))
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
identity=1:N;
plot(identity,col=2+2*(identity<split))
plot(rf,col=2+2*(rf<split))
plot(identity,col=2+2*(identity<split))
plot(identity,col=2+2*(identity<split),cex=1.5)
plot(identity,col=2+2*(identity<split),lwd=2,cex=1.5)
plot(identity,col=2+2*(identity<split),lwd=2,cex=1)
plot(identity,col=2+2*(identity<split),lwd=2,cex=1.25)
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
plot(rf,col=2+2*(rf<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 1.25, lty = "solid")
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid",labels(1:N))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid",labels=1:N)
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid",label=1:N)
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 0.7, pos=3)
text(identity, labels=identity, cex= 0.7, pos=2)
text(identity, labels=identity, cex= 0.7, pos=10)
text(identity, labels=identity, cex= 0.7, pos=4)
text(identity, labels=identity, cex= 0.7, pos=1)
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 0.7, pos=1+2*(identity<split))
text(identity, labels=identity, cex= 1.7, pos=1+2*(identity<split))
text(identity, labels=identity, cex= 0.75, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 0.75, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 0.7, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 1.25, lty = "solid")
text(rf, labels=rf, cex= 0.7, pos=1+2*(rf<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 0.7, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 1, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 1.25, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 2, lty = "solid")
text(rf, labels=rf, cex= 1.25, pos=1+2*(rf<split))
x=10;
c(rf[1:x],sort(rf[(x+1):N]))
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=rf, cex= 1.25, pos=1+2*(s<split))
s
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
identity=1:N;
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 2, lty = "solid")
text(rf, labels=rf, cex= 1.25, pos=1+2*(rf<split))
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
split
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
sum(rf[1:x]<split)
x-sum(rf[1:x]<split)
s=c(rf[1:x],sort(rf[(x+1):N]))
x-sum(rf[1:x]<split)
x-sum(rf[1:x]<split)
s=c(rf[1:x],sort(rf[(x+1):N]))
x-sum(rf[1:x]<split)
x-sum(rf[1:x]<split)
s=c(rf[1:x],sort(rf[(x+1):N]))
x-sum(rf[1:x]<split)
s=c(rf[1:x],x-sum(rf[1:x]<split)+sum(rf[1:x]<split):(split-1),(split+x-sum(rf[1:x]<split)-1):N)
s
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(c(rf[1:x],x-sum(rf[1:x]<split)+sum(rf[1:x]<split):(split-1),(split+x-sum(rf[1:x]<split)-1):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
x=10;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
x=15;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
identity=1:N;
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 2, lty = "solid")
text(rf, labels=rf, cex= 1.25, pos=1+2*(rf<split))
x=15;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
N=52;
(rf=riffle.shuffle(1:N))
if (any((rf-1:N)>0)) {
split=rf[min(which((rf-1:N)>0))]
} else{split=N}
identity=1:N;
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 2, lty = "solid")
text(rf, labels=rf, cex= 1.25, pos=1+2*(rf<split))
x=20;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(s,col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
plot(c(rf[1:x],(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(c(rf[1:x],(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
x=20;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(s, labels=s, cex= 1.25, pos=1+2*(s<split))
x=20;
s=c(rf[1:x],sort(rf[(x+1):N]))
plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid")
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=s, cex= 1.25, pos=1+2*(s<split))
install.packages("manipulate")
library(manipulate)
manipulate(s=c(rf[1:x],sort(rf[(x+1):N])),
plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=s, cex= 1.25, pos=1+2*(s<split)),
x=0:N)
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split)),
x=0:N)
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split)),
x=slider(0,N))
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split)),
x=slider(0,N))
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
x=slider(0,N))
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(s<split),pch = 19, cex = 2, lty = "solid"),
x=slider(1,N))
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(c(rf[1:x],sort(rf[(x+1):N]))<split),pch = 19, cex = 2, lty = "solid"),
x=slider(1,N))
manipulate(plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(c(rf[1:x],sort(rf[(x+1):N]))<split),pch = 19, cex = 2, lty = "solid"),
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split)),
x=slider(1,N))
manipulate({plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(c(rf[1:x],sort(rf[(x+1):N]))<split),pch = 19, cex = 2, lty = "solid");
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split))},
x=slider(1,N))
model1=lm(formula = theFormula,data=thuesen)
str(thuesen)
edit(thuesen)
options(na.action=na.omit) # omit NA's
attach(thuesen)
summary(thuesen)
plot(blood.glucose, short.velocity, xlim=c(0,20), ylim=c(1,2))
lm(short.velocity ~ blood.glucose)
model1=lm(short.velocity ~ blood.glucose)
detach(thuesen)
theFormula = short.velocity ~ blood.glucose
model1=lm(formula = theFormula,data=thuesen)
model1
str(model1)
summary(model1)               # analysis summary
abline(model1)                # add regression line
coef(model1)                  # regression coefficients
resid(model1)                 # residuals
fitted(model1)                # fitted values
deviance(model1)              # residual sum of squares
predict(model1,newdata=ndat)  # predict for new data
predict(model1)
x=as.data.frame(thuesen$blood.glucose[is.na(thuesen$short.velocity)])
names(x)="blood.glucose"
predict(model1,newdata=x)
sum(coef(model1)*c(1,as.numeric(x)))
plot(fitted(model1),resid(model1))
qqnorm(resid(model1))
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
points(thuesen$blood.glucose,predict(model1),pch=10)    # WRONG!
mv = is.na(thuesen$short.velocity)
points(thuesen$blood.glucose[-which(mv)],predict(model1),pch=10)
segments(thuesen$blood.glucose,fitted(model1),
thuesen$blood.glucose,thuesen$short.velocity) # WRONG!
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv])
options(na.action=na.exclude) # exclude NA's
data("thuesen",package = "ISwR")
str(thuesen)
edit(thuesen)
options(na.action=na.omit) # omit NA's
attach(thuesen)
summary(thuesen)
plot(blood.glucose, short.velocity, xlim=c(0,20), ylim=c(1,2))
lm(short.velocity ~ blood.glucose)
model1=lm(short.velocity ~ blood.glucose)
detach(thuesen)
theFormula = short.velocity ~ blood.glucose
model1=lm(formula = theFormula,data=thuesen)
model1
str(model1)
summary(model1)               # analysis summary
abline(model1)                # add regression line
coef(model1)                  # regression coefficients
resid(model1)                 # residuals
fitted(model1)                # fitted values
deviance(model1)              # residual sum of squares
predict(model1,newdata=ndat)  # predict for new data
predict(model1)
x=as.data.frame(thuesen$blood.glucose[is.na(thuesen$short.velocity)])
names(x)="blood.glucose"
predict(model1,newdata=x)
sum(coef(model1)*c(1,as.numeric(x)))
plot(fitted(model1),resid(model1))
qqnorm(resid(model1))
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
points(thuesen$blood.glucose,predict(model1),pch=10)    # WRONG!
abline(model1$coefficients, col='red', lwd=2)
mv = is.na(thuesen$short.velocity)
points(thuesen$blood.glucose[-which(mv)],predict(model1),pch=10)
segments(thuesen$blood.glucose,fitted(model1),
thuesen$blood.glucose,thuesen$short.velocity) # WRONG!
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[!mv],fitted(model1),
thuesen$blood.glucose[!mv],thuesen$short.velocity[!mv])
options(na.action=na.exclude) # exclude NA's
model1=lm(formula = theFormula,data=thuesen)
fitted(model1)
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)
manipulate({plot(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N),col=2+2*(c(rf[1:x],sort(rf[(x+1):N]))<split),pch = 19, cex = 2, lty = "solid");
text(c(rf[1:x],x-sum(rf[1:x]<split)+(sum(rf[1:x]<split)+1):(split-1),(split+x-sum(rf[1:x]<split)):N), labels=c(rf[1:x],sort(rf[(x+1):N])), cex= 1.25, pos=1+2*(c(rf[1:x],sort(rf[(x+1):N]))<split))},
x=slider(1,N))
model1=lm(formula = theFormula,data=thuesen)
fitted(model1)
plot(thuesen$blood.glucose, thuesen$short.velocity, xlim=c(0,20), ylim=c(1,2))
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
model1=lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])
abline(model1$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)},
x=slider(1,10))
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose,fitted(model1), thuesen$blood.glucose,thuesen$short.velocity)},
x=slider(1,10))
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])},
x=slider(1,10))
lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients
x=5
lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])},
x=slider(1,10))
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients, col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])},
x=slider(1,10))
plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2))
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients, col='red', lwd=2)
lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x]), col='red', lwd=2)
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x]), col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])},
x=slider(1,10))
lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])
lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])
as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x]))
as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients)
manipulate({plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients), col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])},
x=slider(1,10))
x=5
{plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients), col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])}
{plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients), col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])}
x=5
plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients), col='red', lwd=2)
as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients)
fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x]))
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])
x=20
plot(thuesen$blood.glucose[1:x], thuesen$short.velocity[1:x], xlim=c(0,20), ylim=c(1,2));
abline(as.numeric(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])$coefficients), col='red', lwd=2)
segments(thuesen$blood.glucose[1:x],fitted(lm(thuesen$blood.glucose[1:x]~thuesen$short.velocity[1:x])), thuesen$blood.glucose[1:x],thuesen$short.velocity[1:x])
plot(identity,col=2+2*(identity<split),pch = 19, cex = 2, lty = "solid")
text(identity, labels=identity, cex= 1.25, pos=1+2*(identity<split))
plot(rf,col=2+2*(rf<split),pch = 19, cex = 2, lty = "solid")
text(rf, labels=rf, cex= 1.25, pos=1+2*(rf<split))
rm(list=ls())                ########### Statistical test ##########
